/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * SyllabusAI API
 * AI powered learning
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  AuthRequest,
  HTTPValidationError,
  UserResponse
} from '../../apiSchemas'
import { apiFetcher } from '../../apiFetcher';
import type { ErrorType } from '../../apiFetcher';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Auth
 */
export const auth = (
    authRequest: AuthRequest,
 options?: SecondParameter<typeof apiFetcher>,) => {
      
      
      return apiFetcher<UserResponse>(
      {url: `/user/auth`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: authRequest
    },
      options);
    }
  


export const getAuthMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof auth>>, TError,{data: AuthRequest}, TContext>, request?: SecondParameter<typeof apiFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof auth>>, TError,{data: AuthRequest}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof auth>>, {data: AuthRequest}> = (props) => {
          const {data} = props ?? {};

          return  auth(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthMutationResult = NonNullable<Awaited<ReturnType<typeof auth>>>
    export type AuthMutationBody = AuthRequest
    export type AuthMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Auth
 */
export const useAuth = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof auth>>, TError,{data: AuthRequest}, TContext>, request?: SecondParameter<typeof apiFetcher>}
): UseMutationResult<
        Awaited<ReturnType<typeof auth>>,
        TError,
        {data: AuthRequest},
        TContext
      > => {

      const mutationOptions = getAuthMutationOptions(options);

      return useMutation(mutationOptions);
    }
    