/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useApiContext, ApiContext } from "./apiContext";
import type * as Fetcher from "./apiFetcher";
import { apiFetch } from "./apiFetcher";
import type * as Schemas from "./apiSchemas";

export type GenerateChaptersApiV1GenerationChaptersPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GenerateChaptersApiV1GenerationChaptersPostVariables = {
  body: Schemas.GenerateChaptersRequest;
} & ApiContext["fetcherOptions"];

export const fetchGenerateChaptersApiV1GenerationChaptersPost = (
  variables: GenerateChaptersApiV1GenerationChaptersPostVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.GenerateChaptersResponse,
    GenerateChaptersApiV1GenerationChaptersPostError,
    Schemas.GenerateChaptersRequest,
    {},
    {},
    {}
  >({
    url: "/api/v1/generation/chapters",
    method: "post",
    ...variables,
    signal,
  });

export const useGenerateChaptersApiV1GenerationChaptersPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GenerateChaptersResponse,
      GenerateChaptersApiV1GenerationChaptersPostError,
      GenerateChaptersApiV1GenerationChaptersPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.GenerateChaptersResponse,
    GenerateChaptersApiV1GenerationChaptersPostError,
    GenerateChaptersApiV1GenerationChaptersPostVariables
  >({
    mutationFn: (
      variables: GenerateChaptersApiV1GenerationChaptersPostVariables,
    ) =>
      fetchGenerateChaptersApiV1GenerationChaptersPost({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type GenerateChapterApiV1GenerationChapterPostError =
  Fetcher.ErrorWrapper<{
    status: 422;
    payload: Schemas.HTTPValidationError;
  }>;

export type GenerateChapterApiV1GenerationChapterPostVariables = {
  body: Schemas.GenerateChapterRequest;
} & ApiContext["fetcherOptions"];

export const fetchGenerateChapterApiV1GenerationChapterPost = (
  variables: GenerateChapterApiV1GenerationChapterPostVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.GenerateChapterResponse,
    GenerateChapterApiV1GenerationChapterPostError,
    Schemas.GenerateChapterRequest,
    {},
    {},
    {}
  >({
    url: "/api/v1/generation/chapter",
    method: "post",
    ...variables,
    signal,
  });

export const useGenerateChapterApiV1GenerationChapterPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GenerateChapterResponse,
      GenerateChapterApiV1GenerationChapterPostError,
      GenerateChapterApiV1GenerationChapterPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.GenerateChapterResponse,
    GenerateChapterApiV1GenerationChapterPostError,
    GenerateChapterApiV1GenerationChapterPostVariables
  >({
    mutationFn: (
      variables: GenerateChapterApiV1GenerationChapterPostVariables,
    ) =>
      fetchGenerateChapterApiV1GenerationChapterPost({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type GenerateQuizApiV1GenerationQuizPostError = Fetcher.ErrorWrapper<{
  status: 422;
  payload: Schemas.HTTPValidationError;
}>;

export type GenerateQuizApiV1GenerationQuizPostVariables = {
  body: Schemas.GenerateQuizRequest;
} & ApiContext["fetcherOptions"];

export const fetchGenerateQuizApiV1GenerationQuizPost = (
  variables: GenerateQuizApiV1GenerationQuizPostVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.GenerateQuizResponse,
    GenerateQuizApiV1GenerationQuizPostError,
    Schemas.GenerateQuizRequest,
    {},
    {},
    {}
  >({ url: "/api/v1/generation/quiz", method: "post", ...variables, signal });

export const useGenerateQuizApiV1GenerationQuizPost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.GenerateQuizResponse,
      GenerateQuizApiV1GenerationQuizPostError,
      GenerateQuizApiV1GenerationQuizPostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.GenerateQuizResponse,
    GenerateQuizApiV1GenerationQuizPostError,
    GenerateQuizApiV1GenerationQuizPostVariables
  >({
    mutationFn: (variables: GenerateQuizApiV1GenerationQuizPostVariables) =>
      fetchGenerateQuizApiV1GenerationQuizPost({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type HealthApiV1InternalHealthGetError = Fetcher.ErrorWrapper<undefined>;

export type HealthApiV1InternalHealthGetVariables =
  ApiContext["fetcherOptions"];

export const fetchHealthApiV1InternalHealthGet = (
  variables: HealthApiV1InternalHealthGetVariables,
  signal?: AbortSignal,
) =>
  apiFetch<void, HealthApiV1InternalHealthGetError, undefined, {}, {}, {}>({
    url: "/api/v1/internal/health",
    method: "get",
    ...variables,
    signal,
  });

export const useHealthApiV1InternalHealthGet = <TData = void,>(
  variables: HealthApiV1InternalHealthGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<void, HealthApiV1InternalHealthGetError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<void, HealthApiV1InternalHealthGetError, TData>({
    queryKey: queryKeyFn({
      path: "/api/v1/internal/health",
      operationId: "healthApiV1InternalHealthGet",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchHealthApiV1InternalHealthGet(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type InvalidateCacheApiV1InternalCachePostError =
  Fetcher.ErrorWrapper<undefined>;

export type InvalidateCacheApiV1InternalCachePostVariables =
  ApiContext["fetcherOptions"];

export const fetchInvalidateCacheApiV1InternalCachePost = (
  variables: InvalidateCacheApiV1InternalCachePostVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    void,
    InvalidateCacheApiV1InternalCachePostError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/v1/internal/cache", method: "post", ...variables, signal });

export const useInvalidateCacheApiV1InternalCachePost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      InvalidateCacheApiV1InternalCachePostError,
      InvalidateCacheApiV1InternalCachePostVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    void,
    InvalidateCacheApiV1InternalCachePostError,
    InvalidateCacheApiV1InternalCachePostVariables
  >({
    mutationFn: (variables: InvalidateCacheApiV1InternalCachePostVariables) =>
      fetchInvalidateCacheApiV1InternalCachePost({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type QueryOperation = {
  path: "/api/v1/internal/health";
  operationId: "healthApiV1InternalHealthGet";
  variables: HealthApiV1InternalHealthGetVariables;
};
