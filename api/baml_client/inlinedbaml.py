###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "chapter.baml": "\r\n\r\nclass Chapter{\r\n  content string\r\n}\r\n\r\n\r\n// Create a function to generate rough chapters outline for learning about a topic\r\nfunction GenerateChapter(chapter: string, description: string) -> Chapter {\r\n  // Specify a client as provider/model-name\r\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\r\n  client \"google-ai/gemini-1.5-flash-latest\" // Set GOOGLE_API_KEY to use this client.\r\n  prompt #\"\r\nYou are an expert tutor tasked with crafting a comprehensive and engaging lesson on a specific topic. You will receive the chapter name and description from the user, and your job is to create an in-depth lesson based on it.\r\n\r\n# Requirements:\r\nStructure your lesson as follows:\r\n\r\n1. **Title**:\r\n   - Start with a main title using a single ## header.\r\n\r\n2. **Introduction**:\r\n   - Begin with an introduction that overviews the key ideas in the chapter description.\r\n   - Ensure the introduction sets the stage for the content by briefly mentioning the major sections to be covered.\r\n\r\n3. **Main Content**:\r\n   - Divide the content into numbered sections (### headers) that cover each concept in substantial depth.\r\n   - **Each section should include:**\r\n     - **Multiple paragraphs:** Thoroughly explain the concept with detailed analysis, aiming for at least 3-4 paragraphs per section.\r\n     - **Numerous examples and case studies:** Provide detailed examples or real-life scenarios to illustrate the concepts.\r\n     - **Step-by-step breakdowns:** Include detailed, step-by-step instructions for each key point.\r\n     - **Diagrams or visuals:** If applicable, describe or reference diagrams to aid understanding.\r\n   - Use subsections (#### headers) to further break down complex ideas.\r\n   - Ensure logical flow: Each section should build logically on the previous one and connect back to the big ideas from the introduction.\r\n   - Suggest further learning resource from the internet with clickable links.\r\n\r\n4. **Conclusion**:\r\n   - Summarize the main takeaways of the lesson in a concise yet comprehensive conclusion.\r\n   - Provide actionable steps or reflective questions for further practice.\r\n\r\nYour response should be in proper markdown format, ready to be copied directly into a markdown file and displayed on a website. Follow these guidelines:\r\n\r\n1. Use appropriate markdown headers (## for main title, ### for sections, #### for subsections).\r\n2. Utilize markdown formatting for emphasis (**bold**, *italic*) where appropriate.\r\n3. Include markdown code blocks (```) for examples, especially for musical notation or scale patterns.\r\n4. Use markdown list formatting (- or 1., 2., 3.) for bullet points or numbered lists.\r\n5. For line breaks, use:\r\n   - A blank line between paragraphs or sections.\r\n   - Two spaces at the end of a line for a soft line break within a paragraph.\r\n6. Use </br> for all line breaks instead of \\n.\r\nEnsure all explanations are accurate and error-free. Write in a friendly teaching tone. Do not excessively use formatting or make the lesson overly complex. Prioritize clarity, depth, and engagement.\r\n\r\n**Important Note:** Each section should provide substantial detail to foster a thorough understanding of the topic. Aim for comprehensive content that includes multiple angles, examples, and in-depth explanations.\r\n\r\nYour output should be a single, cohesive markdown document that can be directly copied and pasted into a markdown file without any additional formatting needed.\r\n\r\n    {{ ctx.output_format }}\r\n\r\n\r\nHere is the chapter you need to create a lesson for:\r\n  {{ chapter }}: {{ description }}\r\n  \"#\r\n}\r\n\r\n// Test the function with a sample resume. Open the VSCode playground to run this.\r\ntest chapter_generation {\r\n  functions [GenerateChapter]\r\n  args {\r\n     chapter #\"\r\n        Variables and Data Types\r\n    \"#\r\n    description #\"\r\nUnderstanding variables, declaring them using `var`, `let`, and `const`, and working with different data types like numbers, strings, booleans, null, and undefined.\r\n\r\n  \"#\r\n  }\r\n}\r\n",
    "chapters.baml": "// Defining a data model.\r\n\r\n\r\nclass ChapterOutline {\r\n  name string\r\n  description string\r\n  slug string\r\n\r\n}\r\n\r\nclass Chapters {\r\n  topic string\r\n  chapters ChapterOutline[]\r\n}\r\n\r\n\r\n// Create a function to generate rough chapters outline for learning about a topic\r\nfunction GenerateChapters(topic: string) -> Chapters {\r\n  // Specify a client as provider/model-name\r\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\r\n  client \"google-ai/gemini-1.5-flash-latest\" // Set GOOGLE_API_KEY to use this client.\r\n  prompt #\"\r\n    You are a course creator tasked with developing high-quality course chapters based on a given topic. \r\n    Imagine you want to teach someone about it and you want to recommend what gradual topics should be covered. From the basics to the advanced topics.\r\n\r\n    For each chapter, provide:\r\n    1. **Name**: A concise title for the chapter.\r\n    2. **Description**: A brief overview of what will be covered in the chapter.\r\n    3. **Slug**: A URL-friendly version of the chapter title.\r\n\r\n    ## Requirements:\r\n    - Each chapter must serve as a prerequisite for the following chapter.\r\n    - Ensure each chapter covers unique content.\r\n    - Your main focus is to provide high-level descriptions and not the actual detailed content.\r\n    - Maintain a logical flow from one chapter to the next.\r\n\r\n    Here is the topic the user wants to learn about: {{ topic }}\r\n\r\n    {{ ctx.output_format }}\r\n  \"#\r\n}\r\n\r\n// Test the function with a sample resume. Open the VSCode playground to run this.\r\ntest chapters_generation {\r\n  functions [GenerateChapters]\r\n  args {\r\n    topic #\"\r\n        JavaScript\r\n    \"#\r\n  }\r\n}\r\n",
    "chat_chapter.baml": "\r\n\r\nclass ChatResponse{\r\n  response string\r\n}\r\n\r\n\r\n// Create a function to generate rough chapters outline for learning about a topic\r\nfunction ChatChapter(content: string, message: string, history: string) -> ChatResponse {\r\n  // Specify a client as provider/model-name\r\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\r\n  client \"google-ai/gemini-1.5-flash-latest\" // Set GOOGLE_API_KEY to use this client.\r\n  prompt #\"\r\nYou are an expert tutor in any topic. A student will ask you questions about a chapter they are studying at the moment. The chapter content will be provided to you along with history of interaction between you and the student.\r\nYour job is to respond to the user's queries in a friendly and informative manner. Try to be as fun as possible and provide detailed explanations wheenver necessary or less verbose answers whenever necessary to help the student understand the chapter better.\r\n\r\n    {{ ctx.output_format }}\r\n\r\n\r\nHere the full chapter content:\r\n# CHAPTER CONTENT START\r\n  {{ content }}\r\n\r\n\r\n# CHAPTER CONTENT END\r\n\r\nUser current message: \r\nmessage: {{ message }}\r\n\r\n\r\nHere the previous messages with this user where bot is your responses and user is the user messages:\r\n\r\n{{ history }}\r\n\r\n  \"#\r\n}\r\n\r\n// Test the function with a sample resume. Open the VSCode playground to run this.\r\ntest chat_chapter {\r\n  functions [ChatChapter]\r\n  args {\r\n     content #\"\r\n        The Spark: Finding Your Story Idea\r\nIntroduction:\r\n\r\nThis chapter is all about igniting that creative fire—finding your story idea. We'll explore a range of techniques to help you brainstorm effectively, identify the perfect genre for your story, develop compelling characters and premises, and finally, consider various story structures to give your narrative shape. We'll cover brainstorming methods, genre selection, character development, premise crafting, and a look at popular story structures.\r\n\r\n1. Brainstorming Techniques: Unleashing Your Creative Potential\r\nFinding a story idea can feel daunting, but with the right brainstorming techniques, you can unlock a wealth of possibilities. Don't strive for perfection at this stage; the goal is to generate ideas, no matter how wild or seemingly impractical. Let's explore several proven techniques:\r\n\r\nFreewriting: Set a timer (e.g., 10 minutes) and write continuously without stopping, editing, or censoring yourself. Let your thoughts flow onto the page. You might be surprised at the gems you uncover.\r\nExample: Start with a single word – “Forest” – and just keep writing anything that comes to mind. You might end up writing about a lost child, a hidden treasure, or a mystical creature living within. </br>\r\n\r\nMind Mapping: Start with a central idea (your story's core concept) and branch out with related ideas, characters, settings, and plot points. Use visual connections to see how different elements relate.\r\nExample: If your central idea is “revenge,” branch out to themes like betrayal, justice, family, consequences, different settings (a city, a remote island), and various characters involved.\r\n\r\nSCAMPER: This technique prompts you to consider various modifications to an existing idea: Substitute, Combine, Adapt, Modify, Put to other uses, Eliminate, Reverse. Applying SCAMPER to a typical superhero story could involve substituting powers, combining heroes, adapting the setting, and more.\r\nFurther Exploration: Mind Mapping Techniques and SCAMPER\r\nThe key is to experiment with different techniques and find what works best for you. Don't be discouraged if your initial brainstorming doesn't produce a fully formed story—it's the starting point, not the finish line. </br>\r\n\r\n2. Identifying Your Genre: Finding the Right Fit\r\nGenre significantly influences your story's structure, tone, and expected elements. Understanding genre conventions will help you tailor your story to appeal to your target audience. Some key genres include:\r\n\r\nFantasy: Involves magic, mythical creatures, and otherworldly settings.\r\nScience Fiction: Explores futuristic technology, space travel, and societal changes.\r\nMystery: Focuses on solving crimes and unraveling secrets.\r\nRomance: Centers on the development of a romantic relationship.\r\nThriller: Builds suspense and keeps the reader on the edge of their seat.\r\nHorror: Aims to scare and unsettle the reader.\r\nChoosing the right genre is crucial. If you write a romance story with horror elements, the audience might be confused or alienated. Consider what elements you want to emphasize in your story and what appeals most to you as a writer.\r\n\r\nExample: A story about a detective solving a murder in a futuristic city could blend mystery and science fiction.\r\n\r\nExample: A story about a young woman battling a dragon might be considered fantasy.\r\n\r\nIt's also possible to blend genres to create a unique and compelling story. Think of it like mixing different colors to create a new shade. Consider how different genres would interact to create a distinctive narrative.\r\n\r\n3. Developing Compelling Characters and Premises\r\nYour characters are the heart of your story, and a strong premise will drive the narrative. Let's delve into both:\r\n\r\n3.1. Character Development\r\nCreate characters that are believable, relatable, and engaging. Give each character a clear motivation, flaws, strengths, and a compelling backstory. Consider using character profiles to organize your ideas. Think about what makes them tick, what their desires are, and what they fear.\r\n\r\nExample: A seemingly perfect protagonist might secretly harbor deep insecurities, creating internal conflict and driving their actions.\r\n\r\n3.2. Premise Crafting\r\nThe premise is the core idea of your story—the central conflict or problem that drives the plot. It should be concise, intriguing, and captivating. A strong premise will immediately hook readers and leave them wanting more.\r\n\r\nExample: A simple premise might be “A detective must solve a murder before the killer strikes again.” A more complex premise might be, “A young woman discovers a hidden power that connects her to an ancient prophecy, forcing her to choose between her own life and the fate of the world.”\r\n\r\nA well-defined premise, coupled with compelling characters, will provide a solid foundation for your story.\r\n\r\n4. Exploring Different Story Structures\r\nChoosing the right structure is crucial for pacing and clarity. Popular story structures include:\r\n\r\nLinear: Events unfold chronologically from beginning to end.\r\nNonlinear: Events are presented out of chronological order, often using flashbacks or flash-forwards.\r\nIn Medias Res: The story begins in the middle of the action.\r\nCircular: The story ends where it begins, often with a sense of completion or closure.\r\nExperiment with different structures to find what best suits your story and its message. A nonlinear structure can create suspense, while a linear structure offers a clear and straightforward narrative.\r\n\r\nExample: A thriller might use in medias res to immediately grab the reader's attention, while a coming-of-age story might benefit from a linear structure to showcase the character's growth.\r\n\r\nFurther Learning: Story Structure\r\nConclusion:\r\n\r\nFinding your story idea is a journey of exploration and discovery. By employing effective brainstorming techniques, carefully selecting your genre, developing compelling characters and premises, and choosing a suitable story structure, you’ll be well-equipped to bring your unique narrative to life. Remember to experiment, revise, and refine your ideas until you are satisfied. Now, go forth and write! What story are you ready to tell? Consider starting with a freewriting exercise, focusing on one specific aspect of your preferred genre that excites you. Reflect on your process – what did you find most challenging, and what worked best for you?\r\n    \"#\r\n    message #\"\r\n        Can you explain the SCAMPER technique in more detail?\r\n  \"#\r\n\r\n  history #\"\r\n    [\r\n      {\r\n        \"message\": \"Can you explain the SCAMPER technique in more detail?\",\r\n        \"user_type\": \"user\"\r\n      }\r\n    ]\r\n\r\n  \"#\r\n\r\n  }\r\n}\r\n",
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\r\n\r\nclient<llm> CustomGPT4o {\r\n  provider openai\r\n  options {\r\n    model \"gpt-4o\"\r\n    api_key env.OPENAI_API_KEY\r\n  }\r\n}\r\n\r\nclient<llm> CustomGPT4oMini {\r\n  provider openai\r\n  retry_policy Exponential\r\n  options {\r\n    model \"gpt-4o-mini\"\r\n    api_key env.OPENAI_API_KEY\r\n  }\r\n}\r\n\r\nclient<llm> CustomSonnet {\r\n  provider anthropic\r\n  options {\r\n    model \"claude-3-5-sonnet-20241022\"\r\n    api_key env.ANTHROPIC_API_KEY\r\n  }\r\n}\r\n\r\nclient<llm> CustomGemini {\r\n  provider google-ai\r\n  options {\r\n    model \"gemini-1.5-flash-latest\"\r\n    api_key  env.GOOGLE_API_KEY\r\n  }\r\n}\r\n\r\nclient<llm> CustomHaiku {\r\n  provider anthropic\r\n  retry_policy Constant\r\n  options {\r\n    model \"claude-3-haiku-20240307\"\r\n    api_key env.ANTHROPIC_API_KEY\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\r\nclient<llm> CustomFast {\r\n  provider round-robin\r\n  options {\r\n    // This will alternate between the two clients\r\n    strategy [CustomGPT4oMini, CustomHaiku]\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\r\nclient<llm> OpenaiFallback {\r\n  provider fallback\r\n  options {\r\n    // This will try the clients in order until one succeeds\r\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/retry\r\nretry_policy Constant {\r\n  max_retries 3\r\n  // Strategy is optional\r\n  strategy {\r\n    type constant_delay\r\n    delay_ms 200\r\n  }\r\n}\r\n\r\nretry_policy Exponential {\r\n  max_retries 2\r\n  // Strategy is optional\r\n  strategy {\r\n    type exponential_backoff\r\n    delay_ms 300\r\n    mutliplier 1.5\r\n    max_delay_ms 10000\r\n  }\r\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\r\n// your choice. You can have multiple generators if you use multiple languages.\r\n// Just ensure that the output_dir is different for each generator.\r\ngenerator target {\r\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\r\n    output_type \"python/pydantic\"\r\n\r\n    // Where the generated code will be saved (relative to baml_src/)\r\n    output_dir \"../\"\r\n\r\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\r\n    // The BAML VSCode extension version should also match this version.\r\n    version \"0.70.5\"\r\n\r\n    // Valid values: \"sync\", \"async\"\r\n    // This controls what `b.FunctionName()` will be (sync or async).\r\n    default_client_mode sync\r\n}\r\n",
}

def get_baml_files():
    return file_map